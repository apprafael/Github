//
//  RepositoriesViewController.swift
//  Github
//
//  Created by Rafael Almeida on 28/03/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RepositoriesDisplayLogic: AnyObject
{
    func displayRepositories(viewModel: Repositories.Initial.ViewModel)
    func displayError(viewModel: Repositories.Error.ViewModel)
}

class RepositoriesViewController: UIViewController
{
    var interactor: RepositoriesBusinessLogic?
    var router: (NSObjectProtocol & RepositoriesRoutingLogic & RepositoriesDataPassing)?
    var repositories: [RepositoryViewModel]?
    
    private lazy var tableView: UITableView = {
        let tableView = UITableView()
        tableView.dataSource = self
        tableView.register(RepositoryCell.self,
                           forCellReuseIdentifier: RepositoryCell.getIdentifier())
        tableView.translatesAutoresizingMaskIntoConstraints = false
        return tableView
    }()

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = RepositoriesInteractor()
    let presenter = RepositoriesPresenter()
    let router = RepositoriesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad(){
    super.viewDidLoad()
    applyViewCode()
    interactor?.getRespositories(request: Repositories.Initial.Request())
  }
}

extension RepositoriesViewController: RepositoriesDisplayLogic {
    func displayRepositories(viewModel: Repositories.Initial.ViewModel){
        repositories = viewModel.repositories
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    func displayError(viewModel: Repositories.Error.ViewModel){
        
    }
}

extension RepositoriesViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return repositories?.count ?? 0
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if let cell = tableView.dequeueReusableCell(withIdentifier: RepositoryCell.getIdentifier()) as? RepositoryCell, let repository = repositories?[indexPath.row] {
            cell.repositoryViewModel = repository
            return cell
        }
        return UITableViewCell()
    }
}

extension RepositoriesViewController: ViewCodeProtocol {
    func buildHierarchy() {
        view.addSubview(tableView)
    }
    
    func setupConstraints() {
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.layoutMarginsGuide.topAnchor),
            tableView.leftAnchor.constraint(equalTo: view.leftAnchor),
            tableView.rightAnchor.constraint(equalTo: view.rightAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
    }
    
    func configureView() {
        view.backgroundColor = .white
    }
}
